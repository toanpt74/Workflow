import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import transforms, datasets
from torch.utils.data import DataLoader

# Define a simple diffusion model
class SimpleDiffusionModel(nn.Module):
    def __init__(self):
        super(SimpleDiffusionModel, self).__init__()
        self.encoder = nn.Sequential(
            nn.Conv2d(3, 64, kernel_size=4, stride=2, padding=1),
            nn.ReLU(True),
            nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1),
            nn.ReLU(True),
            nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1),
            nn.ReLU(True)
        )
        self.decoder = nn.Sequential(
            nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1),
            nn.ReLU(True),
            nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1),
            nn.ReLU(True),
            nn.ConvTranspose2d(64, 3, kernel_size=4, stride=2, padding=1),
            nn.Sigmoid()
        )

    def forward(self, x):
        x = self.encoder(x)
        x = self.decoder(x)
        return x

# Load dataset (e.g., CIFAR-10)
transform = transforms.Compose([
    transforms.Resize(32),
    transforms.ToTensor()
])
train_dataset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)

# Initialize model, loss function, and optimizer
model = SimpleDiffusionModel().cuda()
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Training loop
num_epochs = 10
for epoch in range(num_epochs):
    for images, _ in train_loader:
        images = images.cuda()

        # Add noise to the images
        noise = torch.randn_like(images) * 0.1
        noisy_images = images + noise

        # Forward pass
        outputs = model(noisy_images)
        loss = criterion(outputs, images)

        # Backward pass and optimization
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')

# Save the trained model
torch.save(model.state_dict(), 'simple_diffusion_model.pth')

# Reconstruction example
def reconstruct_image(noisy_image):
    model.eval()
    with torch.no_grad():
        noisy_image = noisy_image.unsqueeze(0).cuda()
        reconstructed_image = model(noisy_image)
        return reconstructed_image.squeeze(0).cpu()

# Example usage
# Load an example noisy image and reconstruct it
example_noisy_image = train_dataset[0][0] + torch.randn_like(train_dataset[0][0]) * 0.1
reconstructed_image = reconstruct_image(example_noisy_image)

# Display the original, noisy, and reconstructed images
import matplotlib.pyplot as plt

def show_images(original, noisy, reconstructed):
    fig, axes = plt.subplots(1, 3, figsize=(12, 4))
    axes[0].imshow(original.permute(1, 2, 0))
    axes[0].set_title('Original Image')
    axes[1].imshow(noisy.permute(1, 2, 0))
    axes[1].set_title('Noisy Image')
    axes[2].imshow(reconstructed.permute(1, 2, 0))
    axes[2].set_title('Reconstructed Image')
    for ax in axes:
        ax.axis('off')
    plt.show()

show_images(train_dataset[0][0], example_noisy_image, reconstructed_image)
///////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import transforms, datasets
from torch.utils.data import DataLoader

# Assuming necessary imports for GaussianFourierProjection, Dense, SpatialTransformer, etc. are done

class UNet_Transformer(nn.Module):
    def __init__(self, marginal_prob_std, channels=[32, 64, 128, 256], embed_dim=256,
                 text_dim=256, nClass=10):
        super().__init__()
        self.time_embed = nn.Sequential(
            GaussianFourierProjection(embed_dim=embed_dim),
            nn.Linear(embed_dim, embed_dim)
        )

        # Encoding layers
        self.conv1 = nn.Conv2d(1, channels[0], 3, stride=1, bias=False)
        self.dense1 = Dense(embed_dim, channels[0])
        self.gnorm1 = nn.GroupNorm(4, num_channels=channels[0])

        self.conv2 = nn.Conv2d(channels[0], channels[1], 3, stride=2, bias=False)
        self.dense2 = Dense(embed_dim, channels[1])
        self.gnorm2 = nn.GroupNorm(32, num_channels=channels[1])

        self.conv3 = nn.Conv2d(channels[1], channels[2], 3, stride=2, bias=False)
        self.dense3 = Dense(embed_dim, channels[2])
        self.gnorm3 = nn.GroupNorm(32, num_channels=channels[2])
        self.attn3 = SpatialTransformer(channels[2], text_dim)

        self.conv4 = nn.Conv2d(channels[2], channels[3], 3, stride=2, bias=False)
        self.dense4 = Dense(embed_dim, channels[3])
        self.gnorm4 = nn.GroupNorm(32, num_channels=channels[3])
        self.attn4 = SpatialTransformer(channels[3], text_dim)

        # Decoding layers
        self.tconv4 = nn.ConvTranspose2d(channels[3], channels[2], 3, stride=2, bias=False)
        self.dense5 = Dense(embed_dim, channels[2])
        self.tgnorm4 = nn.GroupNorm(32, num_channels=channels[2])

        self.tconv3 = nn.ConvTranspose2d(channels[2], channels[1], 3, stride=2, bias=False, output_padding=1)
        self.dense6 = Dense(embed_dim, channels[1])
        self.tgnorm3 = nn.GroupNorm(32, num_channels=channels[1])

        self.tconv2 = nn.ConvTranspose2d(channels[1], channels[0], 3, stride=2, bias=False, output_padding=1)
        self.dense7 = Dense(embed_dim, channels[0])
        self.tgnorm2 = nn.GroupNorm(32, num_channels=channels[0])
        self.tconv1 = nn.ConvTranspose2d(channels[0], 1, 3, stride=1)

        self.act = nn.SiLU()
        self.marginal_prob_std = marginal_prob_std
        self.cond_embed = nn.Embedding(nClass, text_dim)

    def forward(self, x, t, y=None):
        # Embed time and text
        embed = self.act(self.time_embed(t))
        y_embed = self.cond_embed(y).unsqueeze(1)

        # Encoding
        h1 = self.act(self.gnorm1(self.conv1(x) + self.dense1(embed)))
        h2 = self.act(self.gnorm2(self.conv2(h1) + self.dense2(embed)))
        h3 = self.act(self.gnorm3(self.conv3(h2) + self.dense3(embed)))
        h3 = self.attn3(h3, y_embed)
        h4 = self.act(self.gnorm4(self.conv4(h3) + self.dense4(embed)))
        h4 = self.attn4(h4, y_embed)

        # Decoding
        h = self.act(self.tgnorm4(self.tconv4(h4) + self.dense5(embed)))
        h = self.act(self.tgnorm3(self.tconv3(h + h3) + self.dense6(embed)))
        h = self.act(self.tgnorm2(self.tconv2(h + h2) + self.dense7(embed)))
        h = self.tconv1(h + h1)

        # Normalize predicted noise by std at time t
        h = h / self.marginal_prob_std(t)[:, None, None, None]
        return h

# Define the marginal probability standard deviation function
def marginal_prob_std(t):
    # Define your marginal probability standard deviation function here
    return torch.exp(-0.5 * t)

# Initialize the model, optimizer, and loss function
model = UNet_Transformer(marginal_prob_std).cuda()
optimizer = optim.Adam(model.parameters(), lr=0.001)
criterion = nn.MSELoss()

# Load dataset (e.g., CIFAR-10)
transform = transforms.Compose([
    transforms.Resize(32),
    transforms.ToTensor()
])
train_dataset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)

# Training loop
num_epochs = 10
for epoch in range(num_epochs):
    for images, _ in train_loader:
        images = images.cuda()

        # Add noise to the images
        t = torch.rand(images.size(0)).cuda()
        noise = torch.randn_like(images) * marginal_prob_std(t)[:, None, None, None]
        noisy_images = images + noise

        # Forward pass
        outputs = model(noisy_images, t)
        loss = criterion(outputs, images)

        # Backward pass and optimization
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')

# Save the trained model
torch.save(model.state_dict(), 'unet_transformer_model.pth')

# Reconstruction example
def reconstruct_image(noisy_image, t):
    model.eval()
    with torch.no_grad():
        noisy_image = noisy_image.unsqueeze(0).cuda()
        reconstructed_image = model(noisy_image, t).squeeze(0).cpu()
        return reconstructed_image

# Example usage
# Load an example noisy image and reconstruct it
example_noisy_image = train_dataset[0][0] + torch.randn_like(train_dataset[0][0]) * marginal_prob_std(torch.tensor([0.5])).squeeze()
reconstructed_image = reconstruct_image(example_noisy_image, torch.tensor([0.5]).cuda())

# Display the original, noisy, and reconstructed images
import matplotlib.pyplot as plt

def show_images(original, noisy, reconstructed):
    fig, axes = plt.subplots(1, 3, figsize=(12, 4))
    axes[0].imshow(original.permute(1, 2, 0))
    axes[0].set_title('Original Image')
    axes[1].imshow(noisy.permute(1, 2, 0))
    axes[1].set_title('Noisy Image')
    axes[2].imshow(reconstructed.permute(1, 2, 0))
    axes[2].set_title('Reconstructed Image')
    for ax in axes:
        ax.axis('off')
    plt.show()

show_images(train_dataset[0][0], example_noisy_image, reconstructed_image)

