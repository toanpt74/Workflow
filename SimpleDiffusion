import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import transforms, datasets
from torch.utils.data import DataLoader

# Define a simple diffusion model
class SimpleDiffusionModel(nn.Module):
    def __init__(self):
        super(SimpleDiffusionModel, self).__init__()
        self.encoder = nn.Sequential(
            nn.Conv2d(3, 64, kernel_size=4, stride=2, padding=1),
            nn.ReLU(True),
            nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1),
            nn.ReLU(True),
            nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1),
            nn.ReLU(True)
        )
        self.decoder = nn.Sequential(
            nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1),
            nn.ReLU(True),
            nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1),
            nn.ReLU(True),
            nn.ConvTranspose2d(64, 3, kernel_size=4, stride=2, padding=1),
            nn.Sigmoid()
        )

    def forward(self, x):
        x = self.encoder(x)
        x = self.decoder(x)
        return x

# Load dataset (e.g., CIFAR-10)
transform = transforms.Compose([
    transforms.Resize(32),
    transforms.ToTensor()
])
train_dataset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)

# Initialize model, loss function, and optimizer
model = SimpleDiffusionModel().cuda()
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Training loop
num_epochs = 10
for epoch in range(num_epochs):
    for images, _ in train_loader:
        images = images.cuda()

        # Add noise to the images
        noise = torch.randn_like(images) * 0.1
        noisy_images = images + noise

        # Forward pass
        outputs = model(noisy_images)
        loss = criterion(outputs, images)

        # Backward pass and optimization
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')

# Save the trained model
torch.save(model.state_dict(), 'simple_diffusion_model.pth')

# Reconstruction example
def reconstruct_image(noisy_image):
    model.eval()
    with torch.no_grad():
        noisy_image = noisy_image.unsqueeze(0).cuda()
        reconstructed_image = model(noisy_image)
        return reconstructed_image.squeeze(0).cpu()

# Example usage
# Load an example noisy image and reconstruct it
example_noisy_image = train_dataset[0][0] + torch.randn_like(train_dataset[0][0]) * 0.1
reconstructed_image = reconstruct_image(example_noisy_image)

# Display the original, noisy, and reconstructed images
import matplotlib.pyplot as plt

def show_images(original, noisy, reconstructed):
    fig, axes = plt.subplots(1, 3, figsize=(12, 4))
    axes[0].imshow(original.permute(1, 2, 0))
    axes[0].set_title('Original Image')
    axes[1].imshow(noisy.permute(1, 2, 0))
    axes[1].set_title('Noisy Image')
    axes[2].imshow(reconstructed.permute(1, 2, 0))
    axes[2].set_title('Reconstructed Image')
    for ax in axes:
        ax.axis('off')
    plt.show()

show_images(train_dataset[0][0], example_noisy_image, reconstructed_image)
