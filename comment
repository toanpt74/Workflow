TRẮC NGHIỆM C++
Câu 1: Giả sử cần khai báo biến Staff_Age để lưu trữ tuổi của nhân viên, hãy chọn kiểu dữ liệu phù hợp nhất cho biến Staff_Age
A. short int
B. long
C. float
D. double
Đúng, Đáp án đúng là short int
vì tuổi là số nguyên dương, do vậy sử dụng kiểu dữ liệu short int là phù hợp nhất
Câu 2: Giả sử cần khai báo biến Staff_Gender để lưu trữ giới tính của nhân viên, hãy chọn kiểu dữ liệu phù hợp nhất cho biến Staff_Gender
A. bool
B. float
c. double
D. string
Đúng, đáp án đúng là: bool
vì giới tính thường chỉ nhận hai giá trị là Nam hoặc Nữ, do vậy sử dụng kiểu dữ liệu bool là phù hợp nhất
Câu 3: Giả sử cần khai báo biến salary_coff để lưu trữ hệ số lương của nhân viên, hãy chọn kiểu dữ liệu phù hợp nhất cho biến salary_coff
A. float
B. bool
c. int
D. string
Đúng, đáp án đúng là: float
vì hệ số lương là số thực, do vậy sử dụng kiểu dữ liệu float là phù hợp nhất
Câu 4: Trong C++ giả sử đã khai báo và khởi tạo các biến a, b, c như sau:
  int a =32;
  int b = 33;
  char c = a+b; 
 Nếu sử dụng lệnh cout<<c; để hiển thị kết quả, khi đó kết quả hiển thị là gì?
A. A
B. 65
C. 66
D. Thông báo lỗi
Đúng, đáp án đúng là: A
Vì a+b = 32+33 = 65. Tuy nhiên biến c được khai báo là kiểu char, do vậy sẽ hiển thị chữ A (có mã Asscii là 65)
Câu 5: Trong C++ cho biến a = 5.5 và b=1.5. Lệnh nào sai?
A. a&=b;
B. a+=b;
C. a*=b;
D. a/=b;
Đúng, đáp án đúng là a&=b 
Vì phép toán & chỉ thực hiện trên kiểu dữ liệu rời rạc
Câu 6: Trong C++ cho hai biến kiểu int a và b, với giá trị lần lượt là 1 và 2. Biến nguyên x được gán như sau:
x = a<<b. Hỏi x có giá trị bằng bao nhiêu?
A. 1
B. 2
C. 4
D. 8
Đúng, đáp án đúng là: 4
Vì a = 1 = 0000.0000 0000.0001, khi thực hiện phép toán a << 2 thì kết quả sẽ dịch trái 2 bit=> x = 0000.0000 0000.0100 = 4
Câu 7: Trong c++ xét hàm như sau:
int thongbao(string u="No Name", int a=21)
{
	cout<<"Hello:"<<u<<", age:"<<a;
    return 0;
}
Cách gọi hàm nào đúng?
A. thongbao("Hai", 25);
B. thongbao(u="Hai", a=25);
C. thongbao(25, "Hai");
D. thongbao('Hai', 25);
Đúng, đáp án đúng là thongbao("Hai", 25)
Vì hàm thông báo có hai đối số là u kiểu string và a kiểu int, do vậy khi gọi hàm cần truyền vào đúng số lượng tham số và kiểu dữ liệu của tham số

Câu 8: Trong c++ xét hàm như sau:
int thongbao(string u="No Name", int a=21)
{
	cout<<"Hello:"<<u<<", age:"<<a;
    return 0;
}
Cách gọi hàm nào sai?
A. thongbao("Hai");
B. thongbao("Hai", 25);
C. thongbao(25);
D. thongbao();
Đúng, đáp án đúng là thongbao(25)
Vì hàm thông báo có hai đối số là u kiểu string và a kiểu int, do vậy khi gọi hàm cần truyền vào đúng số lượng tham số và kiểu dữ liệu của tham số

Câu 9: 



///////////////////////////////////////////////////////////////////
Tạo chương trình test cho các luồng công việc cụ thể
from test_funcs.compute_greedy_makespan import greedy_average_makespan
from test_funcs.sample_average_makespan import sample_average_makespan
from My_dataset_info import *
from MyDataloader import MyDataloader
from rcpsp_simulator.skip_env import Skip_environment
import numpy as np
import time

import os
import random
import time
from Params import args
from model.actor_critic import Agent
from rcpsp_simulator.normal_env import Normal_environment
from rcpsp_simulator.skip_env import Skip_environment

from MyDataloader import MyDataloader
from My_dataset_info import  *
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from torch.distributions.categorical import Categorical
from torch.utils.tensorboard import SummaryWriter
import copy
from test_funcs.compute_greedy_makespan import greedy_average_makespan
from tqdm import tqdm
model_30 = r"D:\RCPSP\RL-RCPSP\saves\set_301160_321736313092.0018058.pt"

model = r"D:\RCPSP\RL-RCPSP\saves\set_301160_321736313092.0018058.pt"


dataloader_test_30 = MyDataloader(test_set_30)


n_samples = 30
greedy_test = False
normal_env = False
if_variant = False


## normal test ###
all_model = [model_30]
all_dataloader = [dataloader_test_30]



for model, dataloader in zip(all_model, all_dataloader):
    print(model)
    average_makespan, average_time = sample_average_makespan(model, dataloader, n_sampels=n_samples,
                                                             normal_env=normal_env, variant=if_variant,
                                                             greedy_test=greedy_test)
    print(average_makespan, average_time)
#Để lây thông tin về makespan của toàn bộ các job trong chương trình, thêm lệnh print(all_data_store) vào cuối tệp tin sample_average_makespan

///////////////////////////////////////////////////////////////////

Không gian trạng thái state được biểu diễn bởi các đặc trưng cơ bản:
+ ma trận kề adjacency matrix
+ ma trận thuộc tính feature matrix
+ ma trận tài nguyên Resource excute
+ runable node index: một list VD: [0, 1, 2]
+ ma trận action_mask = có số chiều bằng số job, đây là ma trận nhị phân biểu diễn số trạng thái job được thực thi
 action_mask =[1, 1, 1, 0, 0, ...0] (khởi tạo có 3 job được thực thi là job 0, 1, 2)

+ action = 0, 1, 2,....,30.


